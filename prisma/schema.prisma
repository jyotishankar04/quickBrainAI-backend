generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  name         String
  username     String    @unique
  email        String    @unique
  isVerified   Boolean   @default(false)
  bio          String    @default("Hey there! I'm using QuickBrainAI")
  avatarId     String?
  avatarUrl    String?
  bannerId     String?
  bannerUrl    String?
  location     String?
  instagramUrl String?
  twitterUrl   String?
  githubUrl    String?
  customUrl    String?
  linkedinUrl  String?
  gender       Gender?
  dob          DateTime?

  password     String
  refreshToken String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role             Role             @default(USER)
  subscriptionPlan SubscriptionPlan @default(FREE)
  Notes            Notes[]
  categories       Category[]
  Chat             Chat[]
  UserSkill        UserSkill[]

  @@index([email])
  @@index([username])
  @@map("users")
}

model Skill {
  id        String      @id @default(uuid())
  name      String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  UserSkill UserSkill[]

  @@map("skills")
}

model UserSkill {
  userId  String
  skillId String
  User    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@id([userId, skillId]) // Composite primary key
  @@map("user_skills")
}

model Category {
  id     String  @id @default(uuid())
  name   String
  Notes  Notes[]
  userId String
  User   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, userId])
  @@map("categories")
}

model Notes {
  id              String   @id @default(uuid())
  noteTitle       String
  noteDescription String
  noteContent     String
  isStared        Boolean  @default(false)
  isPrivate       Boolean  @default(false)
  files           String[]
  extractedText   String   @default("")

  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId String?

  tags String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chat      Chat?    @relation(fields: [chatId], references: [id], onDelete: Cascade) // One-to-One relationship
  chatId    String?  @unique

  @@index([userId])
  @@map("notes")
}

model Chat {
  id        String    @id @default(uuid())
  noteId    String    @unique // Ensures one-to-one relationship
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  messages  Message[]
  createdAt DateTime  @default(now())
  Notes     Notes?

  @@index([noteId])
  @@index([userId])
  @@map("chats")
}

model Message {
  id      String @id @default(uuid())
  chat    Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId  String
  sender  Sender @default(USER) // Enum to identify User or AI messages
  content String

  createdAt DateTime @default(now())

  @@index([chatId])
  @@map("messages")
}

// Explicit many-to-many relationship table
model Otp {
  id        String   @id @default(cuid())
  otp       String
  email     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("otp")
}

// ENUMS 

enum Role {
  USER
  ADMIN
}

enum SubscriptionPlan {
  FREE
  PREMIUM
  PRO
}

enum Sender {
  USER
  AI
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
